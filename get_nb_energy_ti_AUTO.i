! NOTE: This code is autogenerated by ti_code3.py, do not edit this file

!*******************************************************************************
!
! Subroutine:  get_nb_energy_ti
!
! Description:
!              
! The main routine for non bond energy (vdw and hbond) as well as direct part
! of ewald sum.  It is structured for parallelism. This has been modfied
! to calculate energy/forces for TI.
!
!*******************************************************************************

subroutine get_nb_energy_ti(img_frc, img_crd, img_qterm, eed_cub, &
                         ipairs, tranvec, need_pot_enes, need_virials, &
                         eed, evdw, ehb, eedvir, virial, img_atm_map)

  use img_mod
  use timers_mod
  use mdin_ctrl_dat_mod
  use mdin_ewald_dat_mod
  use parallel_mod
  use parallel_dat_mod
  use prmtop_dat_mod
  use ene_frc_splines_mod
  use ti_mod
  use nb_pairlist_mod
  use img_mod
  
  implicit none

! Formal arguments:

  double precision, intent(in out) :: img_frc(3, *)
  double precision, intent(in)     :: img_crd(3, *)
  double precision , intent(in)    :: img_qterm(*)
  double precision, intent(in)     :: eed_cub(*)
  integer                          :: ipairs(*)
  double precision, intent(in)     :: tranvec(1:3, 0:17)
  logical, intent(in)              :: need_pot_enes
  logical, intent(in)              :: need_virials
  double precision, intent(out)    :: eed
  double precision, intent(out)    :: evdw
  double precision, intent(out)    :: ehb
  double precision, intent(out)    :: eedvir
  double precision, intent(out)    :: virial(3, 3)
  integer, intent(in)              :: img_atm_map(*)

! Local variables and parameters:

  double precision      del
  double precision      dxdr
  double precision      eedtbdns_stk
  double precision      eedvir_stk, eed_stk, evdw_stk, ehb_stk
  double precision      max_nb_cut2, es_cut2, es_cut
  double precision      x_i, y_i, z_i
  double precision      x_tran(1:3, 0:17)
  double precision      vxx, vxy, vxz, vyy, vyz, vzz
  integer               i
  integer               ipairs_idx
  integer               ntypes_stk
  integer               img_i
  integer               ee_eval_cnt
  integer               full_eval_cnt
  integer               common_tran    ! flag - 1 if translation not needed
  logical               cutoffs_equal
  integer                         :: j
  integer                         :: real_i
  integer                         :: real_j
  double precision                :: sc_vdw_stk(2)
  double precision                :: sc_dvdl_elect_stk(2)
  double precision                :: sc_dvdl_vdw_stk(2)
  double precision                :: sc_elect_stk(2)
  double precision                :: ti_pot_elect_stk(2)
  double precision                :: ti_pot_vdw_stk(2)
  double precision                :: ti_wt_stk(2)
  double precision                :: eedvir_stk_sc(2)
  double precision                :: sceeorderinv
  integer                         :: ti_ee_eval_cnt(nb_list_cnt)
  integer                         :: ti_full_eval_cnt(nb_list_cnt)

#ifdef MPI
  if (my_img_lo .gt. my_img_hi) return
#endif /* MPI */

#ifdef CUDA
  call gpu_get_nb_energy()
#else

  sc_vdw_stk(:) = 0.d0
  sc_dvdl_elect_stk(:) = 0.d0
  sc_dvdl_vdw_stk(:) = 0.d0
  sc_elect_stk(:) = 0.d0
  ti_pot_elect_stk(:) = 0.d0
  ti_pot_vdw_stk(:) = 0.d0
  eedvir_stk_sc(:) = 0.d0
  ti_wt_stk(:) = ti_weights(:)
  sceeorderinv = 1.d0 / dble(sceeorder)


  ntypes_stk = ntypes

  eedvir_stk = 0.d0
  eed_stk = 0.d0
  evdw_stk = 0.d0
  ehb_stk = 0.d0

  dxdr = ew_coeff
  eedtbdns_stk = eedtbdns
  del = 1.d0 / eedtbdns_stk
  max_nb_cut2 = vdw_cutoff * vdw_cutoff
  es_cut = es_cutoff
  es_cut2 = es_cut * es_cut
  cutoffs_equal = (vdw_cutoff .eq. es_cutoff)

  vxx = 0.d0
  vxy = 0.d0
  vxz = 0.d0
  vyy = 0.d0
  vyz = 0.d0
  vzz = 0.d0

  ipairs_idx = 1

  if (need_pot_enes) then

    do img_i = my_img_lo, my_img_hi

      real_i = img_atm_map(img_i)

      ! Common translation (ie. no translation) flag is packed at
      ! the front of each sublist followed by the count(s) of sublist
      ! image pair entries.

      common_tran = ipairs(ipairs_idx)
    
      ! Electrostatic evaluation-only count followed by
      ! full evaluation count packed at the front of each pair sublist.

      ee_eval_cnt = ipairs(ipairs_idx + 1)
      full_eval_cnt = ipairs(ipairs_idx + 2)
      
      do i = 1, nb_list_cnt
        ti_ee_eval_cnt(i) = ipairs(ipairs_idx + 2*(i-1) + 1)
        ti_full_eval_cnt(i) = ipairs(ipairs_idx + 2*(i-1) + 2)                    
      end do
      
      ipairs_idx = ipairs_idx + nb_list_cnt * 2 + 1

      if (ee_eval_cnt + full_eval_cnt .gt. 0) then

        x_i = img_crd(1, img_i)
        y_i = img_crd(2, img_i)
        z_i = img_crd(3, img_i)

        if (common_tran .eq. 0) then
          ! We need all the translation vectors:
          do i = 0, 17
            x_tran(1, i) = tranvec(1, i) - x_i
            x_tran(2, i) = tranvec(2, i) - y_i
            x_tran(3, i) = tranvec(3, i) - z_i
          end do
        else
          ! Just put the x,y,z values in the middle cell
          x_tran(1, 13) = - x_i
          x_tran(2, 13) = - y_i
          x_tran(3, 13) = - z_i
        end if

        ! We always need virials from this routine if we need energies,
        ! because the virials are used in estimating the pme error.

        if (cutoffs_equal) then
          call pairs_calc_efv(img_frc, img_crd, img_qterm, efs_tbl, &
                              eed_cub, typ_ico, ipairs(ipairs_idx), &
                              gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)
        else
          call pairs_calc_efv_2cut(img_frc, img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)

        end if
        ipairs_idx = ipairs_idx + ee_eval_cnt + full_eval_cnt

      end if
      
      ! Loop over all TI pair lists      

        if (ti_ee_eval_cnt(2) + ti_full_eval_cnt(2) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(2)
          full_eval_cnt = ti_full_eval_cnt(2)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then            
                call pairs_calc_ti_linear_V0_cut1_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_linear_V0_cut1_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then
                call pairs_calc_ti_linear_V0_cut2_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_linear_V0_cut2_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(2) + ti_full_eval_cnt(2)
        end if
 

        if (ti_ee_eval_cnt(3) + ti_full_eval_cnt(3) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(3)
          full_eval_cnt = ti_full_eval_cnt(3)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then            
                call pairs_calc_ti_linear_V1_cut1_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_linear_V1_cut1_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then
                call pairs_calc_ti_linear_V1_cut2_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_linear_V1_cut2_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(3) + ti_full_eval_cnt(3)
        end if
 

        if (ti_ee_eval_cnt(4) + ti_full_eval_cnt(4) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(4)
          full_eval_cnt = ti_full_eval_cnt(4)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then            
                call pairs_calc_ti_sc_common_V0_cut1_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_sc_common_V0_cut1_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then
                call pairs_calc_ti_sc_common_V0_cut2_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_sc_common_V0_cut2_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(4) + ti_full_eval_cnt(4)
        end if
 

        if (ti_ee_eval_cnt(5) + ti_full_eval_cnt(5) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(5)
          full_eval_cnt = ti_full_eval_cnt(5)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then            
                call pairs_calc_ti_sc_common_V1_cut1_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_sc_common_V1_cut1_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then
                call pairs_calc_ti_sc_common_V1_cut2_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_sc_common_V1_cut2_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(5) + ti_full_eval_cnt(5)
        end if
 

        if (ti_ee_eval_cnt(6) + ti_full_eval_cnt(6) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(6)
          full_eval_cnt = ti_full_eval_cnt(6)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then            
                call pairs_calc_ti_sc_sc_V0_cut1_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_sc_sc_V0_cut1_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then
                call pairs_calc_ti_sc_sc_V0_cut2_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_sc_sc_V0_cut2_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(6) + ti_full_eval_cnt(6)
        end if
 

        if (ti_ee_eval_cnt(7) + ti_full_eval_cnt(7) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(7)
          full_eval_cnt = ti_full_eval_cnt(7)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then            
                call pairs_calc_ti_sc_sc_V1_cut1_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_sc_sc_V1_cut1_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (ifmbar_lcl .ne. 0 .and. do_mbar) then
                call pairs_calc_ti_sc_sc_V1_cut2_mefv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_sc_sc_V1_cut2_efv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(7) + ti_full_eval_cnt(7)
        end if
 

      end do ! img_i       
  else ! do not need energies...

    do img_i = my_img_lo, my_img_hi
      real_i = img_atm_map(img_i)

      ! Common translation (ie. no translation) flag is packed at
      ! the front of each sublist followed by the count(s) of sublist
      ! image pair entries.

      common_tran = ipairs(ipairs_idx)
    
      ! Electrostatic evaluation-only count followed by
      ! full evaluation count packed at the front of each pair sublist.

      ee_eval_cnt = ipairs(ipairs_idx + 1)
      full_eval_cnt = ipairs(ipairs_idx + 2)
      
      do i = 1, nb_list_cnt       
        ti_ee_eval_cnt(i) = ipairs(ipairs_idx + 2*(i-1) + 1)
        ti_full_eval_cnt(i) = ipairs(ipairs_idx + 2*(i-1) + 2)          
      end do
      
      ipairs_idx = ipairs_idx + nb_list_cnt * 2 + 1

      if (ee_eval_cnt + full_eval_cnt .gt. 0) then
        x_i = img_crd(1, img_i)
        y_i = img_crd(2, img_i)
        z_i = img_crd(3, img_i)

        if (common_tran .eq. 0) then
          ! We need all the translation vectors:
          do i = 0, 17
            x_tran(1, i) = tranvec(1, i) - x_i
            x_tran(2, i) = tranvec(2, i) - y_i
            x_tran(3, i) = tranvec(3, i) - z_i
          end do
        else
          ! Just put the x,y,z values in the middle cell
          x_tran(1, 13) = - x_i
          x_tran(2, 13) = - y_i
          x_tran(3, 13) = - z_i
        end if        
       
        if (need_virials) then
          if (cutoffs_equal) then
            call pairs_calc_fv(img_frc, img_crd, img_qterm, fs_tbl, &
                               eed_cub, typ_ico, ipairs(ipairs_idx), &
                               gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)
          else
            call pairs_calc_fv_2cut(img_frc, img_crd, img_qterm, fs_tbl, &
                                    eed_cub, typ_ico, ipairs(ipairs_idx), &
                                    gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)
          end if
        else
          if (cutoffs_equal) then
            call pairs_calc_f(img_frc, img_crd, img_qterm, fs_tbl, &
                              eed_cub, typ_ico, ipairs(ipairs_idx), &
                              gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)
          else
            call pairs_calc_f_2cut(img_frc, img_crd, img_qterm, fs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)
          end if
        end if
        ipairs_idx = ipairs_idx + ee_eval_cnt + full_eval_cnt
      end if      
       
        if (ti_ee_eval_cnt(2) + ti_full_eval_cnt(2) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(2)
          full_eval_cnt = ti_full_eval_cnt(2)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (need_virials) then            
                call pairs_calc_ti_linear_V0_cut1_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_linear_V0_cut1_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (need_virials) then
                call pairs_calc_ti_linear_V0_cut2_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_linear_V0_cut2_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(2) + ti_full_eval_cnt(2)
        end if
 
       
        if (ti_ee_eval_cnt(3) + ti_full_eval_cnt(3) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(3)
          full_eval_cnt = ti_full_eval_cnt(3)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (need_virials) then            
                call pairs_calc_ti_linear_V1_cut1_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_linear_V1_cut1_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (need_virials) then
                call pairs_calc_ti_linear_V1_cut2_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_linear_V1_cut2_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(3) + ti_full_eval_cnt(3)
        end if
 
       
        if (ti_ee_eval_cnt(4) + ti_full_eval_cnt(4) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(4)
          full_eval_cnt = ti_full_eval_cnt(4)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (need_virials) then            
                call pairs_calc_ti_sc_common_V0_cut1_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_sc_common_V0_cut1_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (need_virials) then
                call pairs_calc_ti_sc_common_V0_cut2_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_sc_common_V0_cut2_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(4) + ti_full_eval_cnt(4)
        end if
 
       
        if (ti_ee_eval_cnt(5) + ti_full_eval_cnt(5) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(5)
          full_eval_cnt = ti_full_eval_cnt(5)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (need_virials) then            
                call pairs_calc_ti_sc_common_V1_cut1_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_sc_common_V1_cut1_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (need_virials) then
                call pairs_calc_ti_sc_common_V1_cut2_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_sc_common_V1_cut2_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(5) + ti_full_eval_cnt(5)
        end if
 
       
        if (ti_ee_eval_cnt(6) + ti_full_eval_cnt(6) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(6)
          full_eval_cnt = ti_full_eval_cnt(6)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (need_virials) then            
                call pairs_calc_ti_sc_sc_V0_cut1_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_sc_sc_V0_cut1_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (need_virials) then
                call pairs_calc_ti_sc_sc_V0_cut2_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_sc_sc_V0_cut2_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(6) + ti_full_eval_cnt(6)
        end if
 
       
        if (ti_ee_eval_cnt(7) + ti_full_eval_cnt(7) .gt. 0) then         
          ee_eval_cnt = ti_ee_eval_cnt(7)
          full_eval_cnt = ti_full_eval_cnt(7)

          x_i = img_crd(1, img_i)
          y_i = img_crd(2, img_i)
          z_i = img_crd(3, img_i)

          if (common_tran .eq. 0) then
            ! We need all the translation vectors:
            do i = 0, 17
              x_tran(1, i) = tranvec(1, i) - x_i
              x_tran(2, i) = tranvec(2, i) - y_i
              x_tran(3, i) = tranvec(3, i) - z_i
            end do
          else
            ! Just put the x,y,z values in the middle cell
            x_tran(1, 13) = - x_i
            x_tran(2, 13) = - y_i
            x_tran(3, 13) = - z_i
          end if

          ! We always need virials from this routine if we need energies,
          ! because the virials are used in estimating the pme error.
          if (cutoffs_equal) then
            if (need_virials) then            
                call pairs_calc_ti_sc_sc_V1_cut1_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)          
            else
                call pairs_calc_ti_sc_sc_V1_cut1_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            end if
          else
            if (need_virials) then
                call pairs_calc_ti_sc_sc_V1_cut2_fv(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)               
            else
                call pairs_calc_ti_sc_sc_V1_cut2_f(img_crd, img_qterm, efs_tbl, &
                                   eed_cub, typ_ico, ipairs(ipairs_idx), &
                                   gbl_img_iac, gbl_cn1, gbl_cn2, x_tran)                   
            end if          
          end if
          ipairs_idx = ipairs_idx + ti_ee_eval_cnt(7) + ti_full_eval_cnt(7)
        end if
 

      end do ! img_i       
  end if ! need_ene
  

  ! Save the energies:
                                                                                
  eedvir = eedvir_stk
  eed = eed_stk
  evdw = evdw_stk
  ehb = ehb_stk
  
  ! First add common frcs to the split arrays:
#ifdef MPI 
  do j = 1, gbl_used_img_cnt
    i = gbl_used_img_lst(j) 
#else
  do i = 1, natom
#endif
    ti_img_frc(1, 1, i) = ti_img_frc(1, 1, i) + img_frc(1, i) * ti_weights(1)
    ti_img_frc(1, 2, i) = ti_img_frc(1, 2, i) + img_frc(2, i) * ti_weights(1)
    ti_img_frc(1, 3, i) = ti_img_frc(1, 3, i) + img_frc(3, i) * ti_weights(1)
 
    ti_img_frc(2, 1, i) = ti_img_frc(2, 1, i) + img_frc(1, i) * ti_weights(2)
    ti_img_frc(2, 2, i) = ti_img_frc(2, 2, i) + img_frc(2, i) * ti_weights(2)
    ti_img_frc(2, 3, i) = ti_img_frc(2, 3, i) + img_frc(3, i) * ti_weights(2)
  end do  
 
  ! Save the energies:
  ti_ene(:,si_vdw_ene) = ti_ene(:,si_vdw_ene) + sc_vdw_stk(:)
  ti_ene(:,si_elect_ene) = ti_ene(:,si_elect_ene) + sc_elect_stk(:)

  !to match sander output we combine the derivative term here
  ti_ene_aug(1,ti_vdw_der_dvdl) = &
     sc_dvdl_vdw_stk(1) * ti_weights(1) + sc_dvdl_vdw_stk(2) * ti_weights(2)
  ti_ene_aug(2,ti_vdw_der_dvdl) = &
     ti_ene_aug(1,ti_vdw_der_dvdl)

  ti_ene_aug(1,ti_elect_der_dvdl) = sc_dvdl_elect_stk(1) * &
     ti_weights(1) + sc_dvdl_elect_stk(2) * ti_weights(2)
  ti_ene_aug(2,ti_elect_der_dvdl) = ti_ene_aug(1,ti_elect_der_dvdl)

  ti_ene_aug(1,ti_der_term) = &
      ti_ene_aug(1,ti_vdw_der_dvdl) + ti_ene_aug(1,ti_elect_der_dvdl)
  ti_ene_aug(2,ti_der_term) = ti_ene_aug(1,ti_der_term)

  ! vdw dvdl
  ti_dvdl = ti_pot_vdw_stk(2) - ti_pot_vdw_stk(1)
  ti_ene_delta(si_vdw_ene) = &
     ti_ene_delta(si_vdw_ene) + ti_dvdl + ti_ene_aug(1,ti_vdw_der_dvdl)

  ti_ene(1,si_dvdl) = ti_ene(1,si_dvdl) + ti_ene_aug(1,ti_der_term) + ti_dvdl

  ! eel dvdl
  ti_dvdl = ti_pot_elect_stk(2) - ti_pot_elect_stk(1)

  ti_ene_delta(si_elect_ene) = &
     ti_ene_delta(si_elect_ene) + ti_dvdl + ti_ene_aug(1,ti_elect_der_dvdl)

  ti_ene(1,si_dvdl) = ti_ene(1,si_dvdl) + ti_dvdl 

  ! for vir_vs_ene only
  ti_vve(ti_vir0) = ti_vve(ti_vir0) + eedvir_stk_sc(1) + eedvir * ti_wt_stk(1)
  ti_vve(ti_vir1) = ti_vve(ti_vir1) + eedvir_stk_sc(2) + eedvir * ti_wt_stk(2)
  ti_vve(ti_ene0) = ti_vve(ti_ene0) + ti_pot_elect_stk(1) + eed
  ti_vve(ti_ene1) = ti_vve(ti_ene1) + ti_pot_elect_stk(2) + eed

  eed = eed + ti_pot_elect_stk(1) * ti_wt_stk(1) + &
              ti_pot_elect_stk(2) * ti_wt_stk(2)

  evdw = evdw + ti_pot_vdw_stk(1) * ti_wt_stk(1) + &
                ti_pot_vdw_stk(2) * ti_wt_stk(2)

  eedvir = eedvir + eedvir_stk_sc(1) + eedvir_stk_sc(2)
  
  ! Save the virials.

  virial(1, 1) = vxx
  virial(1, 2) = vxy
  virial(2, 1) = vxy
  virial(1, 3) = vxz
  virial(3, 1) = vxz
  virial(2, 2) = vyy
  virial(2, 3) = vyz
  virial(3, 2) = vyz
  virial(3, 3) = vzz
#endif /* CUDA */
  return

contains

! common-common interactions use the original pairs_calc function

#define BUILD_PAIRS_CALC_EFV
#define NEED_ENE
#define NEED_VIR
#include "pairs_calc.i"
#undef NEED_VIR
#undef NEED_ENE
#undef BUILD_PAIRS_CALC_EFV

#define BUILD_PAIRS_CALC_FV
#define NEED_VIR
#include "pairs_calc.i"
#undef NEED_VIR
#undef BUILD_PAIRS_CALC_FV

#define BUILD_PAIRS_CALC_F
#include "pairs_calc.i"
#undef BUILD_PAIRS_CALC_F

#define BUILD_PAIRS_CALC_EFV
#define NEED_ENE
#define NEED_VIR
#define BUILD_PAIRS_CALC_NOVEC_2CUT
#include "pairs_calc.i"
#undef BUILD_PAIRS_CALC_NOVEC_2CUT
#undef NEED_VIR
#undef NEED_ENE
#undef BUILD_PAIRS_CALC_EFV

#define BUILD_PAIRS_CALC_FV
#define NEED_VIR
#define BUILD_PAIRS_CALC_NOVEC_2CUT
#include "pairs_calc.i"
#undef BUILD_PAIRS_CALC_NOVEC_2CUT
#undef NEED_ENE
#undef BUILD_PAIRS_CALC_FV

#define BUILD_PAIRS_CALC_F
#define BUILD_PAIRS_CALC_NOVEC_2CUT
#include "pairs_calc.i"
#undef BUILD_PAIRS_CALC_NOVEC_2CUT
#undef BUILD_PAIRS_CALC_F

! Includes all functions listed in the function table pair_calc_funcs
#include "pairs_calc_ti_AUTO.i"

end subroutine get_nb_energy_ti
  
